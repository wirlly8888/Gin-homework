// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entity "homework/entity"

	mock "github.com/stretchr/testify/mock"
)

// TempDataBase is an autogenerated mock type for the TempDataBase type
type TempDataBase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ID
func (_m *TempDataBase) Delete(ID int) error {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: datum
func (_m *TempDataBase) Insert(datum entity.Task) int {
	ret := _m.Called(datum)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(entity.Task) int); ok {
		r0 = rf(datum)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *TempDataBase) List() []entity.Task {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.Task
	if rf, ok := ret.Get(0).(func() []entity.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Task)
		}
	}

	return r0
}

// Upsert provides a mock function with given fields: ID, datum
func (_m *TempDataBase) Upsert(ID int, datum entity.Task) error {
	ret := _m.Called(ID, datum)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, entity.Task) error); ok {
		r0 = rf(ID, datum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTempDataBase creates a new instance of TempDataBase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTempDataBase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TempDataBase {
	mock := &TempDataBase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
