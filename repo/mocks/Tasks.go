// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entity "homework/entity"

	mock "github.com/stretchr/testify/mock"
)

// Tasks is an autogenerated mock type for the Tasks type
type Tasks struct {
	mock.Mock
}

// Create provides a mock function with given fields: task
func (_m *Tasks) Create(task entity.Task) (int, error) {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Task) (int, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(entity.Task) int); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(entity.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: taskID
func (_m *Tasks) Delete(taskID int) error {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *Tasks) List() ([]entity.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: task
func (_m *Tasks) Update(task entity.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTasks creates a new instance of Tasks. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTasks(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tasks {
	mock := &Tasks{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
